version: '3.8'

# Production Docker Compose Configuration
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: amazon-arbitrage-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-prod.conf:/etc/postgresql/postgresql.conf
    networks:
      - amazon-arbitrage-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: amazon-arbitrage-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - amazon-arbitrage-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    image: ${REGISTRY:-ghcr.io/aerayalkan/amazon-dropshipping-arbitrage-app}/backend:latest
    container_name: amazon-arbitrage-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN}
      AMAZON_ACCESS_KEY: ${AMAZON_ACCESS_KEY}
      AMAZON_SECRET_KEY: ${AMAZON_SECRET_KEY}
      AMAZON_ASSOCIATE_TAG: ${AMAZON_ASSOCIATE_TAG}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - backend_prod_uploads:/app/uploads
      - backend_prod_logs:/app/logs
    networks:
      - amazon-arbitrage-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Dashboard
  frontend:
    image: ${REGISTRY:-ghcr.io/aerayalkan/amazon-dropshipping-arbitrage-app}/frontend:latest
    container_name: amazon-arbitrage-frontend-prod
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}
    networks:
      - amazon-arbitrage-prod
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AI Service
  ai-service:
    image: ${REGISTRY:-ghcr.io/aerayalkan/amazon-dropshipping-arbitrage-app}/ai-service:latest
    container_name: amazon-arbitrage-ai-prod
    restart: always
    environment:
      FLASK_ENV: production
      REDIS_URL: redis://redis:6379/1
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN}
    volumes:
      - ai_prod_models:/app/models
      - ai_prod_data:/app/data
    networks:
      - amazon-arbitrage-prod
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: amazon-arbitrage-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_prod_logs:/var/log/nginx
    networks:
      - amazon-arbitrage-prod
    depends_on:
      - frontend
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring
  prometheus:
    image: prom/prometheus
    container_name: amazon-arbitrage-prometheus-prod
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    networks:
      - amazon-arbitrage-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana
    container_name: amazon-arbitrage-grafana-prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
    volumes:
      - grafana_prod_data:/var/lib/grafana
    networks:
      - amazon-arbitrage-prod
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_prod_uploads:
    driver: local
  backend_prod_logs:
    driver: local
  ai_prod_models:
    driver: local
  ai_prod_data:
    driver: local
  nginx_prod_logs:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

networks:
  amazon-arbitrage-prod:
    driver: bridge